// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: contacts.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserContactService_CreateContact_FullMethodName                      = "/telephone.UserContactService/CreateContact"
	UserContactService_CreateUser_FullMethodName                         = "/telephone.UserContactService/CreateUser"
	UserContactService_AddUserContact_FullMethodName                     = "/telephone.UserContactService/AddUserContact"
	UserContactService_GetAllUsers_FullMethodName                        = "/telephone.UserContactService/GetAllUsers"
	UserContactService_GetContact_FullMethodName                         = "/telephone.UserContactService/GetContact"
	UserContactService_GetUser_FullMethodName                            = "/telephone.UserContactService/GetUser"
	UserContactService_GetUserContact_FullMethodName                     = "/telephone.UserContactService/GetUserContact"
	UserContactService_GetContacts_FullMethodName                        = "/telephone.UserContactService/GetContacts"
	UserContactService_GetAllRelations_FullMethodName                    = "/telephone.UserContactService/GetAllRelations"
	UserContactService_GetUsersWithPaginationAndFiltering_FullMethodName = "/telephone.UserContactService/GetUsersWithPaginationAndFiltering"
)

// UserContactServiceClient is the client API for UserContactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserContactServiceClient interface {
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	AddUserContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error)
	GetAllUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUserContact(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserContactRelationResponse, error)
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error)
	GetAllRelations(ctx context.Context, in *GetAllRelationsRequest, opts ...grpc.CallOption) (*GetAllRelationsResponse, error)
	GetUsersWithPaginationAndFiltering(ctx context.Context, in *GetUsersWithPaginationAndFilteringRequest, opts ...grpc.CallOption) (*GetUsersWithPaginationAndFilteringResponse, error)
}

type userContactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserContactServiceClient(cc grpc.ClientConnInterface) UserContactServiceClient {
	return &userContactServiceClient{cc}
}

func (c *userContactServiceClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContactResponse)
	err := c.cc.Invoke(ctx, UserContactService_CreateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userContactServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserContactService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userContactServiceClient) AddUserContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddContactResponse)
	err := c.cc.Invoke(ctx, UserContactService_AddUserContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userContactServiceClient) GetAllUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, UserContactService_GetAllUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userContactServiceClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, UserContactService_GetContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userContactServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserContactService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userContactServiceClient) GetUserContact(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserContactRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserContactRelationResponse)
	err := c.cc.Invoke(ctx, UserContactService_GetUserContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userContactServiceClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContactsResponse)
	err := c.cc.Invoke(ctx, UserContactService_GetContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userContactServiceClient) GetAllRelations(ctx context.Context, in *GetAllRelationsRequest, opts ...grpc.CallOption) (*GetAllRelationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRelationsResponse)
	err := c.cc.Invoke(ctx, UserContactService_GetAllRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userContactServiceClient) GetUsersWithPaginationAndFiltering(ctx context.Context, in *GetUsersWithPaginationAndFilteringRequest, opts ...grpc.CallOption) (*GetUsersWithPaginationAndFilteringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersWithPaginationAndFilteringResponse)
	err := c.cc.Invoke(ctx, UserContactService_GetUsersWithPaginationAndFiltering_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserContactServiceServer is the server API for UserContactService service.
// All implementations must embed UnimplementedUserContactServiceServer
// for forward compatibility.
type UserContactServiceServer interface {
	CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	AddUserContact(context.Context, *AddContactRequest) (*AddContactResponse, error)
	GetAllUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUserContact(context.Context, *GetUserRequest) (*GetUserContactRelationResponse, error)
	GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error)
	GetAllRelations(context.Context, *GetAllRelationsRequest) (*GetAllRelationsResponse, error)
	GetUsersWithPaginationAndFiltering(context.Context, *GetUsersWithPaginationAndFilteringRequest) (*GetUsersWithPaginationAndFilteringResponse, error)
	mustEmbedUnimplementedUserContactServiceServer()
}

// UnimplementedUserContactServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserContactServiceServer struct{}

func (UnimplementedUserContactServiceServer) CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedUserContactServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserContactServiceServer) AddUserContact(context.Context, *AddContactRequest) (*AddContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserContact not implemented")
}
func (UnimplementedUserContactServiceServer) GetAllUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUserContactServiceServer) GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedUserContactServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserContactServiceServer) GetUserContact(context.Context, *GetUserRequest) (*GetUserContactRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserContact not implemented")
}
func (UnimplementedUserContactServiceServer) GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedUserContactServiceServer) GetAllRelations(context.Context, *GetAllRelationsRequest) (*GetAllRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRelations not implemented")
}
func (UnimplementedUserContactServiceServer) GetUsersWithPaginationAndFiltering(context.Context, *GetUsersWithPaginationAndFilteringRequest) (*GetUsersWithPaginationAndFilteringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWithPaginationAndFiltering not implemented")
}
func (UnimplementedUserContactServiceServer) mustEmbedUnimplementedUserContactServiceServer() {}
func (UnimplementedUserContactServiceServer) testEmbeddedByValue()                            {}

// UnsafeUserContactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserContactServiceServer will
// result in compilation errors.
type UnsafeUserContactServiceServer interface {
	mustEmbedUnimplementedUserContactServiceServer()
}

func RegisterUserContactServiceServer(s grpc.ServiceRegistrar, srv UserContactServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserContactServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserContactService_ServiceDesc, srv)
}

func _UserContactService_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserContactService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserContactService_AddUserContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).AddUserContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_AddUserContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).AddUserContact(ctx, req.(*AddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserContactService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).GetAllUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserContactService_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserContactService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserContactService_GetUserContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).GetUserContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_GetUserContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).GetUserContact(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserContactService_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_GetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserContactService_GetAllRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).GetAllRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_GetAllRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).GetAllRelations(ctx, req.(*GetAllRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserContactService_GetUsersWithPaginationAndFiltering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersWithPaginationAndFilteringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserContactServiceServer).GetUsersWithPaginationAndFiltering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserContactService_GetUsersWithPaginationAndFiltering_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserContactServiceServer).GetUsersWithPaginationAndFiltering(ctx, req.(*GetUsersWithPaginationAndFilteringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserContactService_ServiceDesc is the grpc.ServiceDesc for UserContactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserContactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telephone.UserContactService",
	HandlerType: (*UserContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _UserContactService_CreateContact_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserContactService_CreateUser_Handler,
		},
		{
			MethodName: "AddUserContact",
			Handler:    _UserContactService_AddUserContact_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UserContactService_GetAllUsers_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _UserContactService_GetContact_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserContactService_GetUser_Handler,
		},
		{
			MethodName: "GetUserContact",
			Handler:    _UserContactService_GetUserContact_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _UserContactService_GetContacts_Handler,
		},
		{
			MethodName: "GetAllRelations",
			Handler:    _UserContactService_GetAllRelations_Handler,
		},
		{
			MethodName: "GetUsersWithPaginationAndFiltering",
			Handler:    _UserContactService_GetUsersWithPaginationAndFiltering_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts.proto",
}
